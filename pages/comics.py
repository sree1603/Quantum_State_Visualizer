import streamlit as st
import os
import fitz  # PyMuPDF
import base64
from io import BytesIO

def get_pdf_thumbnail(pdf_path, page_num=0):
    """Extract the first page of a PDF as a thumbnail image."""
    try:
        doc = fitz.open(pdf_path)
        page = doc.load_page(page_num)
        # Increased resolution for a clearer thumbnail
        pix = page.get_pixmap(matrix=fitz.Matrix(1.5, 1.5))
        img_bytes = pix.tobytes("png")
        base64_img = base64.b64encode(img_bytes).decode()
        return f"data:image/png;base64,{base64_img}"
    except Exception as e:
        st.error(f"Error generating thumbnail for {pdf_path}: {str(e)}")
        return None
    finally:
        if 'doc' in locals():
            doc.close()

def app():
    # --- PDF VIEWER LOGIC ---
    # First, check if a comic has been selected to be viewed.
    # If so, display the viewer and stop the rest of the script from running.
    if "selected_comic" in st.session_state:
        comic_path = st.session_state.selected_comic
        comic_filename = os.path.basename(comic_path)
        title = os.path.splitext(comic_filename)[0].replace('_', ' ')

        st.markdown(f"<h2>Viewing: {title}</h2>", unsafe_allow_html=True)

        # Button to go back to the comic grid
        if st.button("⬅️ Back to Comics"):
            del st.session_state.selected_comic
            st.rerun()

        # Display the selected PDF comic in an iframe
        try:
            with open(comic_path, "rb") as file:
                pdf_bytes = file.read()
            base64_pdf = base64.b64encode(pdf_bytes).decode('utf-8')
            pdf_display = f'<iframe src="data:application/pdf;base64,{base64_pdf}" width="100%" height="800px" type="application/pdf"></iframe>'
            st.markdown(pdf_display, unsafe_allow_html=True)
        except Exception as e:
            st.error(f"Error opening comic: {str(e)}")
        
        # Return to prevent the comic grid from being displayed
        return

    # --- MAIN COMIC GALLERY PAGE ---
    # This part runs only if no comic is selected for viewing.
    st.markdown("<h1 style='text-align: center; font-family: IBM Plex Sans, sans-serif; font-weight: 600; margin-bottom: 1.5rem;'>Quantum Comics</h1>", unsafe_allow_html=True)

    st.markdown("""
    <div style="background-color: #262626; padding: 1.5rem; margin-bottom: 2rem; border-left: 4px solid #0f62fe;">
        <p style="font-family: 'IBM Plex Sans', sans-serif; font-size: 1rem; line-height: 1.5;">
            Explore our collection of quantum-themed comics. Click on any comic to view it in full.
        </p>
    </div>
    """, unsafe_allow_html=True)
    
    # Custom CSS to style the comic tiles within Streamlit's column layout
    st.markdown("""
    <style>
        /* Target the container generated by st.container within each column */
        div[data-testid="column"] .st-emotion-cache-1s6096k {
            background-color: #262626;
            border: 1px solid #393939;
            padding: 1rem;
            border-radius: 8px;
            transition: transform 0.2s ease, box-shadow 0.2s ease;
            height: 100%; /* Ensures all tiles in a row have the same height */
        }
        div[data-testid="column"] .st-emotion-cache-1s6096k:hover {
            transform: translateY(-5px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.4);
            border-color: #0f62fe;
        }
        .comic-title {
            font-family: 'IBM Plex Sans', sans-serif;
            font-weight: 600;
            font-size: 1.1rem;
            margin-top: 0.5rem;
            margin-bottom: 0.5rem;
            color: #ffffff;
        }
        .comic-description {
            font-family: 'IBM Plex Sans', sans-serif;
            font-size: 0.9rem;
            color: #c6c6c6;
            margin-bottom: 1rem;
        }
    </style>
    """, unsafe_allow_html=True)

    # Get comics from the comics folder
    comics_folder = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), "comics")
    
    if not os.path.exists(comics_folder):
        st.warning("Comics folder not found. Please create a 'comics' folder in the project root and add PDF comics.")
        return
    
    comics = [f for f in os.listdir(comics_folder) if f.lower().endswith('.pdf')]
    
    if not comics:
        st.info("No comics found in the comics folder. Add PDF files to display them here.")
        return

    # --- COMIC GRID DISPLAY ---
    # Using st.columns for a responsive grid. Increasing the number of columns makes each tile smaller.
    num_columns = 4
    cols = st.columns(num_columns)
    
    for index, comic_file in enumerate(comics):
        # Place each comic in a column, wrapping around to the next row
        col = cols[index % num_columns]
        
        with col:
            comic_path = os.path.join(comics_folder, comic_file)
            thumbnail_data = get_pdf_thumbnail(comic_path)
            
            if thumbnail_data:
                title = os.path.splitext(comic_file)[0].replace('_', ' ')
                
                # Use a container to group the elements of each tile for styling
                with st.container():
                    st.image(thumbnail_data, use_column_width=True)
                    st.markdown(f'<p class="comic-title">{title}</p>', unsafe_allow_html=True)
                    st.markdown('<p class="comic-description">A quantum adventure awaits!</p>', unsafe_allow_html=True)
                    
                    # This is the Streamlit button that correctly handles the click event
                    if st.button("View Comic", key=f"view_{comic_file}"):
                        st.session_state.selected_comic = comic_path
                        st.rerun()

